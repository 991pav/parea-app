"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import {
  Camera,
  Users,
  Eye,
  EyeOff,
  Heart,
  Plus,
  Search,
  ImageIcon,
  Video,
  Mic,
  MoreHorizontal,
  MessageCircle,
  Share,
} from "lucide-react"
import { useState, useEffect, useRef } from "react"

interface MemoriesProps {
  user?: any
  activeChild: string
  setActiveChild?: (child: string) => void
}

export function Memories({ user, activeChild, setActiveChild }: MemoriesProps) {
  const [likedMemories, setLikedMemories] = useState<number[]>([])
  const [showAddForm, setShowAddForm] = useState(false)
  const [filterType, setFilterType] = useState<"all" | "photos" | "videos" | "notes">("all")
  const [searchQuery, setSearchQuery] = useState("")
  const [openComments, setOpenComments] = useState<{ [id: number]: boolean }>({})
  const [openMenu, setOpenMenu] = useState<{ [id: number]: boolean }>({})
  const [comments, setComments] = useState<{ [id: number]: Array<{author: string, text: string, time: string}> }>({
    // Commentaires pour Emma
    1: [
      { author: "Sarah", text: "Elle était si excitée ce matin ! 😍", time: "08:45" },
      { author: "Grand-mère", text: "Quelle belle journée pour commencer l'école ! 🌟", time: "09:15" },
      { author: "Moi", text: "Merci pour vos messages ! Elle adore déjà sa maîtresse", time: "16:30" }
    ],
    2: [
      { author: "Sarah", text: "Mon cœur fond aussi ! ❤️", time: "19:50" },
      { author: "Grand-père", text: "Ces moments sont les plus précieux de la vie", time: "20:15" },
      { author: "Tante Marie", text: "Emma est un amour ! 😊", time: "21:00" },
      { author: "Moi", text: "Elle le dit maintenant tout le temps !", time: "22:30" },
      { author: "Grand-mère", text: "Quelle belle évolution ! 🌸", time: "23:00" }
    ],
    3: [
      { author: "Sarah", text: "Son rire est vraiment contagieux ! 😄", time: "15:30" },
      { author: "Moi", text: "Merci pour cette belle vidéo !", time: "15:45" },
      { author: "Tante Marie", text: "Elle s'amuse tellement ! 🎈", time: "16:00" },
      { author: "Grand-père", text: "Les grands-parents sont les meilleurs ! 😊", time: "16:15" },
      { author: "Sarah", text: "On devrait y retourner bientôt !", time: "16:30" },
      { author: "Moi", text: "Absolument ! Elle adore le parc", time: "17:00" },
      { author: "Grand-mère", text: "C'était une journée parfaite ! 🌞", time: "17:30" },
      { author: "Tante Marie", text: "Emma a tellement grandi ! 💕", time: "18:00" }
    ],
    // Commentaires pour Lucas
    4: [
      { author: "Sarah", text: "Il était tellement fier ! ⚽️", time: "17:45" },
      { author: "Moi", text: "Son premier but ! Quel moment !", time: "18:00" }
    ],
    5: [
      { author: "Sarah", text: "Bravo Lucas ! 🚲", time: "16:15" },
      { author: "Grand-père", text: "Il grandit si vite !", time: "16:30" }
    ],
    6: [
      { author: "Sarah", text: "Il s'amuse tellement ! 😄", time: "15:30" },
      { author: "Moi", text: "Merci pour la vidéo !", time: "15:45" },
      { author: "Grand-mère", text: "Lucas est un vrai petit clown ! 🤡", time: "16:00" },
      { author: "Tante Marie", text: "Il a de vrais amis ! 💕", time: "16:15" }
    ]
  })
  const [newComment, setNewComment] = useState<{ [id: number]: string }>({})
  const [addType, setAddType] = useState<'photo' | 'video' | 'note' | 'text'>('text')
  const [addVisibility, setAddVisibility] = useState('parents')
  const [addDescription, setAddDescription] = useState("")
  const menuRefs = useRef<{ [id: number]: HTMLDivElement | null }>({})
  const buttonRefs = useRef<{ [id: number]: HTMLButtonElement | null }>({})

  // Fermer le menu quand on clique ailleurs
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Node
      Object.keys(openMenu).forEach((id) => {
        const menuId = parseInt(id)
        const menuRef = menuRefs.current[menuId]
        const buttonRef = buttonRefs.current[menuId]
        
        if (openMenu[menuId] && menuRef && !menuRef.contains(target) && buttonRef && !buttonRef.contains(target)) {
          setOpenMenu((prev) => ({ ...prev, [menuId]: false }))
        }
      })
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [openMenu])

  // Souvenirs selon l'enfant actif
  const memoriesEmma = [
    {
      id: 1,
      type: "photo",
      content: "/placeholder.svg?height=300&width=400",
      description: `Premier jour d'école de Emma ! Elle était si fière de son nouveau cartable 🎒✨`,
      author: user?.profile?.role === "parent1" ? "Moi" : "Sarah",
      date: "4 Sept 2024",
      time: "08:30",
      likes: 5,
      comments: 3,
      visibility: "parents",
      tags: ["école", "rentrée", "fierté"],
    },
    {
      id: 2,
      type: "note",
      content: "",
      description: `Emma a dit son premier "Je t'aime Papa" aujourd'hui. Mon cœur fond complètement ❤️ Ces moments sont si précieux...`,
      author: "Moi",
      date: "28 Oct 2024",
      time: "19:45",
      likes: 8,
      comments: 5,
      visibility: "famille",
      tags: ["émotion", "amour", "première fois"],
    },
    {
      id: 3,
      type: "video",
      content: "/placeholder.svg?height=300&width=400",
      description: `Emma qui rit aux éclats sur les balançoires ! Son bonheur est contagieux 🌳😄`,
      author: "Grand-mère",
      date: "15 Oct 2024",
      time: "15:20",
      likes: 12,
      comments: 8,
      visibility: "famille",
      tags: ["parc", "grands-parents", "jeu", "bonheur"],
    },
  ]
  const memoriesLucas = [
    {
      id: 4,
      type: "photo",
      content: "/placeholder.svg?height=300&width=400",
      description: `Lucas a marqué son premier but au foot ! Il était tellement fier ⚽️🥅`,
      author: user?.profile?.role === "parent1" ? "Moi" : "Sarah",
      date: "20 Nov 2024",
      time: "17:30",
      likes: 3,
      comments: 2,
      visibility: "parents",
      tags: ["football", "victoire", "fierté"],
    },
    {
      id: 5,
      type: "note",
      content: "",
      description: `Lucas a appris à faire du vélo sans petites roues aujourd'hui 🚲👏`,
      author: "Moi",
      date: "5 Oct 2024",
      time: "16:00",
      likes: 6,
      comments: 2,
      visibility: "famille",
      tags: ["vélo", "apprentissage", "première fois"],
    },
    {
      id: 6,
      type: "video",
      content: "/placeholder.svg?height=300&width=400",
      description: `Fou rire de Lucas au parc avec ses copains ! 😄🌳`,
      author: "Grand-père",
      date: "12 Sept 2024",
      time: "15:20",
      likes: 7,
      comments: 4,
      visibility: "famille",
      tags: ["parc", "amis", "jeu", "bonheur"],
    },
  ]
  const memories = activeChild === "Lucas" ? memoriesLucas : memoriesEmma

  const filteredMemories = memories.filter((memory) => {
    const matchesType =
      filterType === "all" ||
      (filterType === "photos" && memory.type === "photo") ||
      (filterType === "videos" && memory.type === "video") ||
      (filterType === "notes" && memory.type === "note")

    const matchesSearch =
      searchQuery === "" ||
      memory.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
      memory.tags.some((tag) => tag.toLowerCase().includes(searchQuery.toLowerCase()))

    return matchesType && matchesSearch
  })

  const toggleLike = (memoryId: number) => {
    setLikedMemories((prev) => (prev.includes(memoryId) ? prev.filter((id) => id !== memoryId) : [...prev, memoryId]))
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "photo":
        return <ImageIcon className="h-4 w-4" />
      case "video":
        return <Video className="h-4 w-4" />
      case "note":
        return <Mic className="h-4 w-4" />
      default:
        return <Heart className="h-4 w-4" />
    }
  }

  const getVisibilityColor = (visibility: string) => {
    switch (visibility) {
      case "parents":
        return "bg-blue-100 text-blue-700 border-blue-200"
      case "famille":
        return "bg-green-100 text-green-700 border-green-200"
      case "enfant":
        return "bg-purple-100 text-purple-700 border-purple-200"
      default:
        return "bg-gray-100 text-gray-700 border-gray-200"
    }
  }

  const handleAddComment = (id: number) => {
    if (!newComment[id] || !newComment[id].trim()) return
    
    const now = new Date()
    const hours = now.getHours().toString().padStart(2, '0')
    const minutes = now.getMinutes().toString().padStart(2, '0')
    const timeString = `${hours}:${minutes}`
    
    const newCommentObj = {
      author: "Moi",
      text: newComment[id],
      time: timeString
    }
    
    setComments(prev => {
      const currentComments = prev[id] || []
      return {
        ...prev,
        [id]: [...currentComments, newCommentObj]
      }
    })
    
    setNewComment(prev => ({ ...prev, [id]: "" }))
  }

  const handleDeleteMemory = (id: number) => {
    alert('Suppression du souvenir (mock)')
    setOpenMenu((prev) => ({ ...prev, [id]: false }))
  }

  const handleChangeVisibility = (id: number, newVisibility: string) => {
    alert(`Changer la visibilité vers ${newVisibility} (mock)`)
    setOpenMenu((prev) => ({ ...prev, [id]: false }))
  }

  return (
    <div className="relative min-h-screen bg-gradient-to-br from-pastel-blue-50 to-pastel-purple-50">
      {/* En-tête avec statistiques et illustration */}
      <Card className="bg-gradient-to-r from-white/95 to-white/90 backdrop-blur-xl border-0 shadow-2xl overflow-hidden transform hover:scale-[1.02] transition-all duration-300">
        <CardContent className="p-6">
          <div className="flex flex-col items-center justify-center mb-6">
            <div className="w-20 h-20 bg-gradient-to-r from-pastel-pink-400 to-pastel-purple-400 rounded-full flex items-center justify-center shadow-xl mb-3">
              <Heart className="h-10 w-10 text-white" />
            </div>
            <h1 className="text-2xl font-bold text-gray-800 mb-2">Memories</h1>
            <p className="text-sm text-gray-600">Partagez vos plus beaux moments</p>
          </div>

          <div className="grid grid-cols-3 gap-4 text-center">
            <div className="bg-gradient-to-br from-blue-50 to-violet-50 rounded-xl p-3 border border-blue-100 shadow-md transform hover:scale-105 transition-transform duration-200">
              <p className="text-2xl font-bold text-blue-600">{memories.length}</p>
              <p className="text-xs text-gray-600">Souvenirs</p>
            </div>
            <div className="bg-gradient-to-br from-blue-50 to-violet-50 rounded-xl p-3 border border-blue-100 shadow-md transform hover:scale-105 transition-transform duration-200">
              <p className="text-2xl font-bold text-blue-600">{memories.reduce((sum, m) => sum + m.likes, 0)}</p>
              <p className="text-xs text-gray-600">J'aime</p>
            </div>
            <div className="bg-gradient-to-br from-violet-50 to-blue-50 rounded-xl p-3 border border-violet-100 shadow-md transform hover:scale-105 transition-transform duration-200">
              <p className="text-2xl font-bold text-violet-600">3</p>
              <p className="text-xs text-gray-600">Ce mois</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Barre de recherche et filtres */}
      <Card className="bg-white/95 backdrop-blur-xl border-0 shadow-2xl">
        <CardContent className="p-4 space-y-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder="Rechercher dans les souvenirs..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10 bg-white border-gray-300 text-gray-800 placeholder:text-gray-500 focus:border-pink-400 focus:ring-pink-400 shadow-sm"
            />
          </div>

          <div className="flex space-x-2">
            {[
              { id: "all", label: "Tous", icon: Heart },
              { id: "photos", label: "Photos", icon: ImageIcon },
              { id: "videos", label: "Vidéos", icon: Video },
              { id: "notes", label: "Notes", icon: Mic },
            ].map((filter) => {
              const Icon = filter.icon
              return (
                <Button
                  key={filter.id}
                  variant="outline"
                  size="sm"
                  onClick={() => setFilterType(filter.id as any)}
                  className={`${
                    filterType === filter.id
                      ? "bg-gradient-to-r from-pink-100 to-purple-100 text-pink-700 border-pink-300 shadow-md"
                      : "bg-white text-gray-600 border-gray-300 hover:bg-pink-50 hover:border-pink-300"
                  } transform hover:scale-105 transition-all duration-200`}
                >
                  <Icon className="h-3 w-3 mr-1" />
                  {filter.label}
                </Button>
              )
            })}
          </div>
        </CardContent>
      </Card>

      {/* Bouton d'ajout en haut, harmonisé */}
      <div className="flex justify-center mt-4 mb-6">
        <Button
          onClick={() => setShowAddForm(!showAddForm)}
          className="w-full max-w-xs flex items-center justify-center h-12 rounded-full bg-gradient-to-r from-pastel-purple-500 to-pastel-pink-500 text-white font-semibold shadow-md hover:from-pastel-purple-600 hover:to-pastel-pink-600 transition-all duration-200"
          aria-label="Ajouter un souvenir"
        >
          <Plus className="h-5 w-5 mr-2" />
          Ajouter un souvenir
        </Button>
      </div>

      {/* Feed de souvenirs avec illustrations douces */}
      <div className="space-y-6">
        {filteredMemories.length === 0 ? (
          <Card className="bg-white/95 backdrop-blur-xl border-0 shadow-2xl">
            <CardContent className="p-8 text-center">
              {/* Illustration d'état vide */}
              <div className="relative mb-6">
                <div className="w-24 h-24 bg-gradient-to-br from-pink-100 to-purple-100 rounded-full flex items-center justify-center mx-auto transform hover:scale-110 transition-transform duration-300">
                  <Heart className="h-12 w-12 text-pink-400" />
                </div>
                <div className="absolute top-2 left-1/2 transform -translate-x-1/2 w-32 h-32 bg-gradient-to-br from-pink-50 to-purple-50 rounded-full opacity-50 -z-10 animate-pulse"></div>
              </div>
              <h3 className="text-lg font-medium text-gray-800 mb-2">Aucun souvenir trouvé</h3>
              <p className="text-gray-600 mb-4">Commencez à créer de beaux souvenirs avec {activeChild}</p>
              <Button
                onClick={() => setShowAddForm(true)}
                className="bg-gradient-to-r from-pink-400 to-purple-500 hover:from-pink-500 hover:to-purple-600 text-white shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200"
              >
                <Plus className="h-4 w-4 mr-2" />
                Premier souvenir
              </Button>
            </CardContent>
          </Card>
        ) : (
          filteredMemories.map((memory) => (
            <Card key={memory.id} className="bg-white/95 backdrop-blur-xl border-0 shadow-2xl overflow-hidden transform hover:scale-[1.02] transition-all duration-300">
              {/* En-tête du souvenir */}
              <div className="p-4 border-b border-gray-100 bg-gradient-to-r from-gray-50 to-white">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-gradient-to-r from-pink-400 to-purple-500 rounded-full flex items-center justify-center shadow-md">
                      <span className="text-white font-semibold text-sm">{memory.author.charAt(0)}</span>
                    </div>
                    <div>
                      <p className="font-medium text-gray-800">{memory.author}</p>
                      <div className="flex items-center space-x-2 text-xs text-gray-500">
                        <span>{memory.date}</span>
                        <span>•</span>
                        <span>{memory.time}</span>
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2 relative">
                    <div className="flex items-center text-gray-500">{getTypeIcon(memory.type)}</div>
                    <Badge className={getVisibilityColor(memory.visibility)}>
                      {memory.visibility === "parents" && <Users className="h-3 w-3 mr-1" />}
                      {memory.visibility === "famille" && <Eye className="h-3 w-3 mr-1" />}
                      {memory.visibility === "enfant" && <EyeOff className="h-3 w-3 mr-1" />}
                      {memory.visibility}
                    </Badge>
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      className="text-gray-400 hover:text-gray-600 relative" 
                      ref={(el) => { buttonRefs.current[memory.id] = el }}
                      onClick={(e) => {
                        e.stopPropagation()
                        setOpenMenu((prev) => ({ ...prev, [memory.id]: !prev[memory.id] }))
                      }}
                    >
                      <MoreHorizontal className="h-4 w-4" />
                    </Button>
                    {openMenu[memory.id] && (
                      <div 
                        ref={(el) => { menuRefs.current[memory.id] = el }}
                        className="absolute right-0 top-12 z-50 bg-white border border-gray-200 rounded-lg shadow-2xl w-56 animate-in fade-in-0 zoom-in-95 duration-200"
                      >
                        <div className="p-3">
                          <div className="text-sm font-semibold text-gray-700 px-2 py-2 mb-2 border-b border-gray-100">Actions</div>
                          
                          <div className="space-y-1 mb-3">
                            <div className="text-xs font-medium text-gray-500 px-2 py-1">Visibilité</div>
                            
                            <button 
                              className="w-full text-left px-3 py-2.5 hover:bg-blue-50 rounded-md text-sm text-gray-700 flex items-center space-x-3 transition-colors duration-150" 
                              onClick={() => { setOpenMenu((prev) => ({ ...prev, [memory.id]: false })); alert('Changer la visibilité (mock)') }}
                            >
                              <div className="w-5 h-5 bg-blue-100 rounded-full flex items-center justify-center">
                                <Eye className="h-3 w-3 text-blue-600" />
                              </div>
                              <span>Visibilité</span>
                            </button>
                          </div>
                          
                          <div className="border-t border-gray-100 my-2"></div>
                          
                          <div className="space-y-1 mb-3">
                            <div className="text-xs font-medium text-gray-500 px-2 py-1">Actions</div>
                            
                            <button 
                              className="w-full text-left px-3 py-2.5 hover:bg-orange-50 rounded-md text-sm text-gray-700 flex items-center space-x-3 transition-colors duration-150" 
                              onClick={() => { setOpenMenu((prev) => ({ ...prev, [memory.id]: false })); alert('Modifier le souvenir (mock)') }}
                            >
                              <div className="w-5 h-5 bg-orange-100 rounded-full flex items-center justify-center">
                                <svg className="h-3 w-3 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                </svg>
                              </div>
                              <span>Modifier</span>
                            </button>
                          </div>
                          
                          <div className="border-t border-gray-100 my-2"></div>
                          
                          <div className="space-y-1">
                            <div className="text-xs font-medium text-gray-500 px-2 py-1">Danger</div>
                            
                            <button 
                              className="w-full text-left px-3 py-2.5 hover:bg-red-50 rounded-md text-sm text-red-600 flex items-center space-x-3 transition-colors duration-150" 
                              onClick={() => handleDeleteMemory(memory.id)}
                            >
                              <div className="w-5 h-5 bg-red-100 rounded-full flex items-center justify-center">
                                <svg className="h-3 w-3 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                              </div>
                              <span>Supprimer</span>
                            </button>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Contenu du souvenir */}
              {(memory.type === "photo" || memory.type === "video") && (
                <div className="relative">
                  <img src={memory.content || "/placeholder.svg"} alt="Souvenir" className="w-full h-80 object-cover" />
                  {memory.type === "video" && (
                    <div className="absolute inset-0 flex items-center justify-center bg-black/20">
                      <div className="w-16 h-16 bg-white/90 rounded-full flex items-center justify-center shadow-lg">
                        <Video className="h-8 w-8 text-gray-700 ml-1" />
                      </div>
                    </div>
                  )}
                  {/* Overlay décoratif doux */}
                  <div className="absolute top-4 right-4 w-8 h-8 bg-white/80 rounded-full flex items-center justify-center shadow-md">
                    <span className="text-pink-500 text-sm">💝</span>
                  </div>
                </div>
              )}

              <div className="p-4">
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center space-x-4">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => toggleLike(memory.id)}
                      className={`p-2 transform hover:scale-110 transition-all duration-200 ${
                        likedMemories.includes(memory.id)
                          ? "text-pink-500 hover:text-pink-600"
                          : "text-gray-600 hover:text-pink-500"
                      }`}
                    >
                      <Heart className={`h-5 w-5 ${likedMemories.includes(memory.id) ? "fill-current" : ""}`} />
                    </Button>
                    <Button variant="ghost" size="sm" className="p-2 text-gray-600 hover:text-gray-800 transform hover:scale-110 transition-all duration-200">
                      <MessageCircle className="h-5 w-5" />
                    </Button>
                    <Button variant="ghost" size="sm" className="p-2 text-gray-600 hover:text-gray-800 transform hover:scale-110 transition-all duration-200">
                      <Share className="h-5 w-5" />
                    </Button>
                  </div>
                </div>

                <div className="space-y-2">
                  <p className="text-sm font-medium text-gray-800">
                    {memory.likes + (likedMemories.includes(memory.id) ? 1 : 0)} j'aime
                  </p>
                  <p className="text-gray-800 leading-relaxed">{memory.description}</p>
                  <div className="flex flex-wrap gap-1 mt-2">
                    {memory.tags.map((tag, index) => (
                      <Badge key={index} className="bg-gradient-to-r from-pink-100 to-purple-100 text-pink-700 hover:from-pink-200 hover:to-purple-200 text-xs border-0 shadow-sm">
                        #{tag}
                      </Badge>
                    ))}
                  </div>
                  {memory.comments > 0 && (
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      className="p-0 h-auto text-gray-500 hover:text-gray-700"
                      onClick={() => setOpenComments((prev) => ({ ...prev, [memory.id]: !prev[memory.id] }))}
                    >
                      Voir les {memory.comments} commentaires
                    </Button>
                  )}
                </div>

                {openComments[memory.id] && (
                  <div className="mt-4 space-y-3 border-t border-gray-100 pt-3">
                    <div className="text-sm font-medium text-gray-700 mb-2">💬 Commentaires</div>
                    <div className="space-y-3 max-h-60 overflow-y-auto">
                      {(comments[memory.id] || []).map((comment, i) => (
                        <div key={i} className="flex space-x-3">
                          <div className="w-8 h-8 bg-gradient-to-r from-pink-400 to-purple-400 rounded-full flex items-center justify-center text-white text-xs font-medium flex-shrink-0">
                            {comment.author.charAt(0)}
                          </div>
                          <div className="flex-1 bg-gray-50 rounded-lg p-3">
                            <div className="flex items-center justify-between mb-1">
                              <span className="text-sm font-medium text-gray-800">{comment.author}</span>
                              <span className="text-xs text-gray-500">{comment.time}</span>
                            </div>
                            <p className="text-sm text-gray-700">{comment.text}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                    <div className="flex space-x-2 pt-2 border-t border-gray-100">
                      <Input
                        value={newComment[memory.id] || ""}
                        onChange={e => setNewComment(prev => ({ ...prev, [memory.id]: e.target.value }))}
                        placeholder="Ajouter un commentaire..."
                        className="flex-1 text-sm"
                      />
                      <Button 
                        size="sm" 
                        onClick={() => handleAddComment(memory.id)} 
                        className="bg-gradient-to-r from-pink-400 to-purple-400 text-white hover:from-pink-500 hover:to-purple-500"
                      >
                        Poster
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            </Card>
          ))
        )}
      </div>

      {/* Formulaire d'ajout avec illustrations */}
      {showAddForm && (
        <Card className="bg-white/95 backdrop-blur-xl border-0 shadow-2xl">
          <CardHeader>
            <CardTitle className="text-gray-800 flex items-center">
              <Plus className="h-5 w-5 mr-2 text-pink-500" />
              Nouveau souvenir
              <div className="ml-auto flex space-x-1">
                <span className="text-lg">✨</span>
                <span className="text-lg">💕</span>
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Textarea
              placeholder="Décrivez ce moment précieux..."
              className="bg-white border-gray-300 text-gray-800 placeholder:text-gray-500 focus:border-pink-400 focus:ring-pink-400 min-h-[100px] shadow-sm"
            />

            <div className="grid grid-cols-3 gap-2">
              <Button className="bg-gradient-to-r from-blue-100 to-cyan-100 text-blue-700 border border-blue-200 hover:from-blue-200 hover:to-cyan-200 shadow-md transform hover:scale-105 transition-all duration-200">
                <Camera className="h-4 w-4 mr-2" />
                Photo
              </Button>
              <Button className="bg-gradient-to-r from-purple-100 to-pink-100 text-purple-700 border border-purple-200 hover:from-purple-200 hover:to-pink-200 shadow-md transform hover:scale-105 transition-all duration-200">
                <Video className="h-4 w-4 mr-2" />
                Vidéo
              </Button>
              <Button className="bg-gradient-to-r from-green-100 to-emerald-100 text-green-700 border border-green-200 hover:from-green-200 hover:to-emerald-200 shadow-md transform hover:scale-105 transition-all duration-200">
                <Mic className="h-4 w-4 mr-2" />
                Note vocale
              </Button>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700">Visibilité</label>
              <select className="w-full p-2 bg-white border border-gray-300 rounded-md text-gray-800 focus:border-pink-400 focus:ring-pink-400 shadow-sm">
                <option value="parents">Parents uniquement</option>
                <option value="famille">Famille élargie</option>
                <option value="enfant">Visible pour l'enfant (16+)</option>
              </select>
            </div>

            <div className="flex space-x-2">
              <Button className="flex-1 bg-gradient-to-r from-pink-400 to-purple-500 hover:from-pink-500 hover:to-purple-600 text-white shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200">
                Publier
              </Button>
              <Button
                variant="outline"
                className="flex-1 border-gray-300 text-gray-700 hover:bg-gray-50"
                onClick={() => setShowAddForm(false)}
              >
                Annuler
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
